#!/usr/bin/env ruby

require_relative '../config/environment'

puts "Welcome to Tic-Tac-Toe!"
puts "Enter '0', '1', or '2' player for the type of game you would like to play."
puts "To quit, type 'exit'."

until gets == "exit"
input = gets.strip

case input
when "0"
  game = Game.new(player_1 = Players::Computer.new("X"), player_2 = Players::Computer.new("O"), board = Board.new())
  game.play() 
    puts "To play again enter '0', '1', or '2' player for the type of game you would like to play."
    puts "To quit, type 'exit'."

    # if game.over?
    #   puts "To play again enter '0', '1', or '2' player for the type of game you would like to play."
    #   puts "To quit, type 'exit'."
    # end

when "1"
  puts "Enter '1' or '2' to choose which player will go first as X."
  input = gets.strip
  if input == "1"
    game = Game.new(player_1 = Players::Human.new("X"), player_2 = Players::Computer.new("O"), board = Board.new())
    game.play()
    if game.over?
      puts "To play again enter '0', '1', or '2' player for the type of game you would like to play."
      puts "To quit, type 'exit'."
    end
  elsif input == "2"
    game = Game.new(player_1 = Players::Computer.new("X"), player_2 = Players::Human.new("O"), board = Board.new())
    game.play()
    if game.over?
      puts "To play again enter '0', '1', or '2' player for the type of game you would like to play."
      puts "To quit, type 'exit'."
    end
  end

when "2"
   puts "Enter '1' or '2' to choose which player will go first as X."
   input = gets.strip
    if input == "1"
      game = Game.new(player_1 = Players::Human.new("X"), player_2 = Players::Human.new("O"), board = Board.new())
      game.play()
      if game.over?
        puts "To play again enter '0', '1', or '2' player for the type of game you would like to play."
        puts "To quit, type 'exit'."
      end
    elsif input == "2"
      game = Game.new(player_1 = Players::Human.new("O"), player_2 = Players::Human.new("X"), board = Board.new())
      game.play()
      if game.over?
        puts "To play again enter '0', '1', or '2' player for the type of game you would like to play."
        puts "To quit, type 'exit'."
      end
    end
    # until gets == "exit"
    end
end

  # puts "To play again enter '0', '1', or '2' player for the type of game you would like to play."
  # puts "To quit, type 'exit'."
  # input = gets.strip

  #   user = gets.chomp
  #   case user
  #   when "list songs"
  #     list_songs
  #   when "list artists"
  #     list_artists
  #   when "list genres"
  #     list_genres
  #   when "list artist"
  #     list_songs_by_artist
  #   when "list genre"
  #     list_songs_by_genre
  #   when "play song"
  #     play_song
  #   end
  #   until gets == ('exit')
  #   end
  # end



# if game.over?
#   puts "To play again enter '0', '1', or '2' player for the type of game you would like to play."
#   puts "To quit, type 'exit'."
#   input = gets.strip
# end

# You can just make a loop, after the game is over prompt the user if they want to play again or exit

# * Greet the user with a message.
# * Prompt the user for what kind of game they want to play, 0,1, or 2 player.
# * Ask the user for who should go first and be "X".
# * Use the input to correctly initialize a `Game` with the appropriate player types and token values.
# * When the game is over, the CLI should prompt the user if they would like to play
# again and allow them to choose a new configuration for the game as described above.
# If the user doesn't want to play again, exit the program.
